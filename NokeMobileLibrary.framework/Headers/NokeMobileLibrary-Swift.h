// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreBluetooth;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NokeMobileLibrary",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;
@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

/// Class stores information about the Noke device and contains methods for interacting with the Noke device
SWIFT_CLASS("_TtC17NokeMobileLibrary10NokeDevice")
@interface NokeDevice : NSObject <CBPeripheralDelegate, NSCoding>
/// Name of the Noke device (strictly cosmetic)
@property (nonatomic, copy) NSString * _Nonnull name;
/// MAC address of Noke device. This can be found in the peripheral name
@property (nonatomic, copy) NSString * _Nonnull mac;
/// Serial number of Noke device. Laser engraved onto the device during manufacturing
@property (nonatomic, copy) NSString * _Nonnull serial;
/// UUID of the lock.  Unique identifier assigned by iOS upon connection
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Firmware and hardware version of the lock. Follows format: ‘3P-2.10’ where ‘3P’ is the hardware version and ‘2.10’ is the firmware version
@property (nonatomic, copy) NSString * _Nonnull version;
/// Tracking key used to track Noke device usage and activity
@property (nonatomic, copy) NSString * _Nonnull trackingKey;
/// Byte array read from the session characteristic upon connecting to the Noke device
@property (nonatomic, copy) NSString * _Nullable session;
/// Battery level of the Noke device in millivolts
@property (nonatomic) uint64_t battery;
/// Initializes a new Noke device with provided properties
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     name: Name of the noke device (strictly for UI purposes)
///   </li>
///   <li>
///     mac: MAC address of noke device.  NokeDeviceManager will scan for this mac address
///   </li>
/// </ul>
/// -Returns: A beautiful, ready-to-use, Noke device just for you
- (nullable instancetype)initWithName:(NSString * _Nonnull)name mac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Noke device with provided properties. This is mostly used when loading cached locks from user defaults, but can also be used to initialize a Noke device when more properties are known
/// -Returns: A beautiful, ready-to-use, Noke device just for you
/// \param name Name of the noke device (strictly for UI purposes)
///
/// \param mac MAC address of noke device.  NokeDeviceManager will scan for this mac address
///
/// \param serial Serial address of the Noke device, laser-engraved on the device during manufacturing
///
/// \param uuid Unique identifier of the Noke device, assigned by iOS
///
/// \param version Hardware and firmware version of the Noke device
///
/// \param trackingKey Tracking key of the Noke device used to track activity
///
/// \param battery Battery level of the lock in millivolts
///
/// \param unlockCmd Unlock command used for offline unlocking
///
/// \param offlineKey Key used to encrypt the offline unlock command
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name mac:(NSString * _Nonnull)mac serial:(NSString * _Nonnull)serial uuid:(NSString * _Nonnull)uuid version:(NSString * _Nonnull)version trackingKey:(NSString * _Nonnull)trackingKey battery:(uint64_t)battery unlockCmd:(NSString * _Nonnull)unlockCmd offlineKey:(NSString * _Nonnull)offlineKey OBJC_DESIGNATED_INITIALIZER;
/// Method used to encode class to be stored in User Defaults
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Method used to decode class to reload from User Defaults
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// MARK: CBPeripheral Delegate Methods
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// Makes the necessary checks and then requests the unlock commands from the server (or generates the unlock command if offline)
/// This method is also responsible for sending the command to the lock after it’s received
/// Before unlocking, please check:
/// <ul>
///   <li>
///     unlock URL is set on the NokeDeviceManager
///   </li>
///   <li>
///     unlock endpoint has been properly implemented on server
///   </li>
///   <li>
///     Noke Device is provided with valid offline key and command (if unlocking offline)
///   </li>
///   <li>
///     A internet connection is present (if unlocking online)
///   </li>
/// </ul>
- (void)unlock;
/// Sends a command string from the Noke Core API to the Noke device
/// \param commands A command string from the Core API. Commands are delimited by ‘+’
///
- (void)sendCommands:(NSString * _Nonnull)commands;
/// Sets offline key and command used for unlocking offline
/// <ul>
///   <li>
///     Parameters:
///     -key: String used to encrypt the command to the lock. Received from the Core API
///     -command: String sent to the lock to unlock offline. Received from the Core API
///   </li>
/// </ul>
- (void)setOfflineValuesWithKey:(NSString * _Nonnull)key command:(NSString * _Nonnull)command;
/// Sets offline values before offline unlocking
/// <ul>
///   <li>
///     Parameters:
///     -key: String used to encrypt the command to the lock. Received from the Core API
///     -command: String sent to the lock to unlock offline. Received from the Core API
///   </li>
/// </ul>
- (void)offlineUnlockWithKey:(NSString * _Nonnull)key command:(NSString * _Nonnull)command;
/// Unlocks the lock using the offline key and the unlock command.  If the keys and commands have been set, no internet connection is required.
- (void)offlineUnlock;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Connection states of Noke Devices
/// <ul>
///   <li>
///     Disconnected: Noke device is not connected to phone
///   </li>
///   <li>
///     Discovered: Noke device is broadcasting and is discovered by phone
///   </li>
///   <li>
///     Connecting: Phone has initialized a connection and is waiting for response
///   </li>
///   <li>
///     Connected: Noke device is successfully connected to phone
///   </li>
///   <li>
///     Syncing: Phone is sending commands to Noke device
///   </li>
///   <li>
///     Unlocked: Noke device is unlocked
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, NokeDeviceConnectionState) {
  NokeDeviceConnectionStateNokeDeviceConnectionStateDisconnected = 0,
  NokeDeviceConnectionStateNokeDeviceConnectionStateDiscovered = 1,
  NokeDeviceConnectionStateNokeDeviceConnectionStateConnecting = 2,
  NokeDeviceConnectionStateNokeDeviceConnectionStateConnected = 3,
  NokeDeviceConnectionStateNokeDeviceConnectionStateSyncing = 4,
  NokeDeviceConnectionStateNokeDeviceConnectionStateUnlocked = 5,
};

/// Lock states of Noke Devices
/// <ul>
///   <li>
///     Unlocked: Noke device unlocked OR Device has been locked but phone never received updated status
///   </li>
///   <li>
///     Locked: Noke device locked
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, NokeDeviceLockState) {
  NokeDeviceLockStateNokeDeviceLockStateUnlocked = 0,
  NokeDeviceLockStateNokeDeviceLockStateLocked = 1,
};

@protocol NokeDeviceManagerDelegate;
@class CBCentralManager;
@class NSNumber;

/// Manages bluetooth interactions with Noke Devices
SWIFT_CLASS("_TtC17NokeMobileLibrary17NokeDeviceManager")
@interface NokeDeviceManager : NSObject <CBCentralManagerDelegate>
/// URL string for uploading data
@property (nonatomic, copy) NSString * _Nonnull uploadUrl;
/// URL string for fetching unlock commands
@property (nonatomic, copy) NSString * _Nonnull unlockUrl;
/// Delegate for NokeDeviceManager, calls protocol methods
@property (nonatomic, strong) id <NokeDeviceManagerDelegate> _Nullable delegate;
/// Initializes a new NokeDeviceManager
///
/// returns:
/// NokeDeviceManager
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Used for getting the shared instance of NokeDeviceManager
///
/// returns:
/// Shared instance of NokeDeviceManager
+ (NokeDeviceManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Begins bluetooth scanning for Noke Devices that have been added to the device array
- (void)startScanForNokeDevices;
/// Stops bluetooth scanning
- (void)stopScan;
/// Initializes connection to Noke Device
/// \param noke The Noke device for the connection
///
- (void)connectToNokeDevice:(NokeDevice * _Nonnull)noke;
/// Disconnects Noke Device from phone
/// \param noke The Noke device from which to disconnect
///
- (void)disconnectNokeDevice:(NokeDevice * _Nonnull)noke;
/// Allows NokeDeviceManager to discover devices that haven’t been added to the device array
/// public func setAllowAllNokeDevices(_ allow: Bool){
/// allowAllNokeDevices = allow
/// }
/// MARK: Central Manager Delegate Methods
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/// MARK: Noke Device Array Methods
/// \code
/// Adds Noke Device to array of managed Noke Devices
///
/// - Parameter noke: The noke device to be added
///
/// \endcode
- (void)addNoke:(NokeDevice * _Nonnull)noke;
/// Removes device from nokeDevices array
/// \param noke The noke device to be removed
///
- (void)removeNokeWithNoke:(NokeDevice * _Nonnull)noke;
/// Removes device from nokeDevices array
/// \param mac The mac address of the noke device to be removed
///
- (void)removeNokeWithMac:(NSString * _Nonnull)mac;
- (void)removeAllNoke;
/// Gets a count of all the devices in the nokeDevice array
///
/// returns:
/// Count of devices as Int
- (NSInteger)getNokeCount SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all the devices in the nokeDevice array
///
/// returns:
/// Array of NokeDevice objects
- (NSArray<NokeDevice *> * _Nonnull)getAllNoke SWIFT_WARN_UNUSED_RESULT;
/// Gets noke device from array with matching UUID
/// <ul>
///   <li>
///     Parameters: UUID of intended Noke device
///   </li>
/// </ul>
///
/// returns:
/// Noke device with requested UUID
- (NokeDevice * _Nullable)nokeWithUUID:(NSString * _Nonnull)uuid SWIFT_WARN_UNUSED_RESULT;
/// Gets noke device from array with matching MAC address
/// <ul>
///   <li>
///     Parameters: MAC address of intended Noke device
///   </li>
/// </ul>
///
/// returns:
/// Noke device with requested MAC address
- (NokeDevice * _Nullable)nokeWithMac:(NSString * _Nonnull)mac SWIFT_WARN_UNUSED_RESULT;
/// Gets noke device from array with matching peripheral
/// <ul>
///   <li>
///     Parameters: Peripheral of intended Noke device
///   </li>
/// </ul>
///
/// returns:
/// Noke device with requested peripheral
- (NokeDevice * _Nullable)nokeWithPeripheral:(CBPeripheral * _Nonnull)peripheral SWIFT_WARN_UNUSED_RESULT;
/// Saves noke devices to user defaults for offline access
- (void)saveNokeDevices;
/// Loads noke devices from user defaults
- (void)loadNokeDevices;
/// Sets Mobile API Key for uploading logs to the Core API
- (void)setAPIKey:(NSString * _Nonnull)apiKey;
/// Sets Upload URL for uploading Noke device responses to the Core API
- (void)changeDefaultUploadUrl:(NSString * _Nonnull)newUploadURL;
/// Saves upload packets to user defaults to ensure they’re cached before uploading
- (void)cacheUploadQueue;
/// Bundles lock responses with the mac, timestamp, and session and then adds the object to the global upload queue
/// \param response 40 char hex string response from Noke device
///
/// \param session 40 char hex string read from the session characteristic of the Noke device when connecting
///
/// \param mac MAC address of the Noke device
///
- (void)addUploadPacketToQueueWithResponse:(NSString * _Nonnull)response session:(NSString * _Nonnull)session mac:(NSString * _Nonnull)mac;
/// Clears all Noke device repsonses from the upload queue
- (void)clearUploadQueue;
/// Formats data and sends it to Noke Core API for parsing and storing
- (void)uploadData;
@end

enum NokeDeviceManagerError : NSInteger;
enum NokeManagerBluetoothState : NSInteger;

/// Delegate for interacting with the NokeDeviceManager
SWIFT_PROTOCOL("_TtP17NokeMobileLibrary25NokeDeviceManagerDelegate_")
@protocol NokeDeviceManagerDelegate
/// Called when a Noke device updates its state.  Please see the NokeDeviceConnectionState enum type for all possible states
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     state: NokeDeviceConnectionState. Possible states include:
///     <ul>
///       <li>
///         Disconnected
///       </li>
///       <li>
///         Discovered
///       </li>
///       <li>
///         Connecting
///       </li>
///       <li>
///         Connected
///       </li>
///       <li>
///         Syncing
///       </li>
///       <li>
///         Unlocked
///       </li>
///     </ul>
///   </li>
///   <li>
///     noke: The Noke device that was updated
///   </li>
/// </ul>
- (void)nokeDeviceDidUpdateStateTo:(enum NokeDeviceConnectionState)state noke:(NokeDevice * _Nonnull)noke;
/// Called when the Noke Mobile library encounters an error. Please see error types for possible errors
/// \param error The NokeDeviceManagerError that was thrown
///
/// \param message English description of error
///
/// \param noke Device associated with the error if applicable
///
- (void)nokeErrorDidOccurWithError:(enum NokeDeviceManagerError)error message:(NSString * _Nonnull)message noke:(NokeDevice * _Nullable)noke;
- (void)bluetoothManagerDidUpdateStateWithState:(enum NokeManagerBluetoothState)state;
@end

typedef SWIFT_ENUM(NSInteger, NokeDeviceManagerError) {
  NokeDeviceManagerErrorNokeAPIErrorInternalServer = 1,
  NokeDeviceManagerErrorNokeAPIErrorAPIKey = 2,
  NokeDeviceManagerErrorNokeAPIErrorInput = 3,
  NokeDeviceManagerErrorNokeAPIErrorRequestMethod = 4,
  NokeDeviceManagerErrorNokeAPIErrorInvalidEndpoint = 5,
  NokeDeviceManagerErrorNokeAPIErrorCompanyNotFound = 6,
  NokeDeviceManagerErrorNokeAPIErrorLockNotFound = 7,
  NokeDeviceManagerErrorNokeAPIErrorUnknown = 99,
  NokeDeviceManagerErrorNokeGoUnlockError = 100,
  NokeDeviceManagerErrorNokeGoUploadError = 101,
  NokeDeviceManagerErrorNokeDeviceSuccessResult = 260,
  NokeDeviceManagerErrorNokeDeviceErrorInvalidKey = 261,
  NokeDeviceManagerErrorNokeDeviceErrorInvalidCmd = 262,
  NokeDeviceManagerErrorNokeDeviceErrorInvalidPermission = 263,
  NokeDeviceManagerErrorNokeDeviceShutdownResult = 264,
  NokeDeviceManagerErrorNokeDeviceErrorInvalidData = 265,
  NokeDeviceManagerErrorNokeDeviceBatteryDataResult = 266,
  NokeDeviceManagerErrorNokeDeviceErrorInvalidResult = 267,
  NokeDeviceManagerErrorNokeDeviceErrorUnknown = 268,
  NokeDeviceManagerErrorNokeLibraryErrorInvalidOfflineKey = 301,
};

typedef SWIFT_ENUM(NSInteger, NokeManagerBluetoothState) {
  NokeManagerBluetoothStateUnknown = 0,
  NokeManagerBluetoothStateResetting = 1,
  NokeManagerBluetoothStateUnsupported = 2,
  NokeManagerBluetoothStateUnauthorized = 3,
  NokeManagerBluetoothStatePoweredOff = 4,
  NokeManagerBluetoothStatePoweredOn = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
